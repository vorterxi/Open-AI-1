/**
 Copyright (C) 2023.
 Licensed under the  GPL-3.0 License;
 You may not use this file except in compliance with the License.
 It is supplied in the hope that it may be useful.
 * @project_name : ·¥è·¥ò·¥á…¥ ·¥Ä‚Å±ÔøΩ ‚ôï
 * @author : ùêåùêöùê°ùêûùê´ ùêôùêÆùêõùêöùê¢ùê´ ‚ôï <https://github.com/Mehar-Zubair>
 * @description : ·¥è·¥ò·¥á…¥ ·¥Ä‚Å±ÔøΩ ‚ôï,A Multi-functional whatsapp bot.
 * @version 1.0.3 
 **/


const { smd,sck,sck1, getAdmin, tlang, prefix } = require('../lib')
const Config = require('../config')
    //---------------------------------------------------------------------------
smd({
        pattern: "act",
        desc: "Switches for varios works.",
        category: "group",
        filename: __filename,
    },
    async(Void, citel, text,{ isCreator }) => {
        //-----------------------------------------
        if (!citel.isGroup) return citel.reply(tlang().group);
        const groupAdmins = await getAdmin(Void, citel)
        const botNumber = await Void.decodeJid(Void.user.id)
        const isBotAdmins = citel.isGroup ? groupAdmins.includes(botNumber) : false;
        const isAdmins = citel.isGroup ? groupAdmins.includes(citel.sender) : false;
        //-----------------------------------------
        if (!citel.isGroup) return citel.reply("·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò")
        if (!text) return citel.reply(`·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥ç·¥á ·¥õ·¥á Ä·¥ç  ü…™·¥ã·¥á  ü…™·¥ã·¥á\n1-·¥á·¥†·¥á…¥·¥õs\n2-·¥Ä…¥·¥õ…™ ü…™…¥·¥ã\n3-…¥s“ì·¥°\n4-·¥Ñ·¥Ä Ä·¥Ö…¢·¥Ä·¥ç·¥á\n5- ô·¥è·¥õ`)
        if (!isAdmins) return citel.reply("·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥")
        switch (text.split(" ")[0]) {
            case 'antilink':
                {
                    let checkgroup = await sck.findOne({ id: citel.chat })
                    if (!checkgroup) {
                        await new sck({ id: citel.chat, antilink: "true" })
                            .save()
                        return citel.reply('·¥Ä…¥·¥õ…™ ü…™…¥·¥ã ·¥á…¥·¥Ä ô ü·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è')
                    } else {
                        if (checkgroup.antilink == "true") return citel.reply("·¥Ä…¥·¥õ…™ ü…™…¥·¥ã ·¥°·¥Äs ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ä ô ü·¥á·¥Ö  ú·¥á Ä·¥á.")
                        await sck.updateOne({ id: citel.chat }, { antilink: "true" })
                        citel.reply('·¥á…¥·¥Ä ô ü·¥á·¥Ö ·¥Ä…¥·¥õ…™ ü…™…¥·¥ã …™…¥ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ñ ú·¥Ä·¥õ.')
                        return
                    }
                }
                break
          
                      case 'economy':
                {
                    let checkgroup = await sck.findOne({ id: citel.chat })
                    if (!checkgroup) {
                        await new sck({ id: citel.chat, economy: "true" })
                            .save()
                        return citel.reply('·¥á·¥Ñ·¥è…¥·¥è·¥ç è ·¥á…¥·¥Ä ô ü·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è')
                    } else {
                        if (checkgroup.economy == "true") return citel.reply("·¥á·¥Ñ·¥è…¥·¥è·¥ç è ·¥°·¥Äs ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ä ô ü·¥á·¥Ö.")
                        await sck.updateOne({ id: citel.chat }, { economy: "true" })
                        citel.reply('·¥á·¥Ñ·¥è…¥·¥è·¥ç è ·¥á…¥·¥Ä ô ü·¥á·¥Ö …™…¥ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ñ ú·¥Ä·¥õ.')
                        return
                    }
                }
                break
            case 'events':
                {
                    let checkgroup = await sck.findOne({ id: citel.chat })
                    if (!checkgroup) {
                        await new sck({ id: citel.chat, events: "true" })
                            .save()
                        return citel.reply("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö *·¥á·¥†·¥á…¥·¥õs*")
                    } else {
                        if (checkgroup.events == "true") return citel.reply("*·¥á·¥†·¥á…¥·¥õs* ·¥Ä Ä·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ä ô ü·¥á·¥Ö")
                        await sck.updateOne({ id: citel.chat }, { events: "true" })
                        return citel.reply("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö *·¥á·¥†·¥á…¥·¥õs*")
                    }
                }
                break
            case 'cardgame':
                {
                    let checkgroup = sck.findOne({ id: citel.chat })
                    if (!checkgroup) {
                        await new sck({ id: citel.chat, cardgame: "active" })
                            .save()
                        return citel.reply("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö *·¥Ñ·¥Ä Ä·¥Ö …¢·¥Ä·¥ç·¥á*")
                    } else {
                        if (checkgroup.cardgame == "active") return citel.reply("*·¥Ñ·¥Ä Ä·¥Ö …¢·¥Ä·¥ç·¥á* ·¥°·¥Äs ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ä ô ü·¥á·¥Ö")
                        await sck.updateOne({ id: citel.chat }, { cardgame: "active" })
                        return citel.reply("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö *·¥Ñ·¥Ä Ä·¥Ö …¢·¥Ä·¥ç·¥á.*")
                    }
                }
                break
            case 'nsfw':
                {
                    let checkgroup = await sck.findOne({ id: citel.chat })
                    if (!checkgroup) {
                        await new sck({ id: citel.chat, nsfw: "true" })
                            .save()
                        return citel.reply("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö *…¥s“ì·¥°*")
                    } else {
                        if (checkgroup.nsfw == "true") return citel.reply("*…¥s“ì·¥°* …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ä ô ü·¥á·¥Ö")
                        await sck.updateOne({ id: citel.chat }, { nsfw: "true" })
                        citel.reply("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö *…¥s“ì·¥°*")
                        return
                    }
                }
                break
            default:
                {
                    citel.reply("·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥ç·¥á ·¥õ·¥á Ä·¥ç  ü…™·¥ã·¥á  ü…™·¥ã·¥á\n1-·¥á·¥†·¥á…¥·¥õs\n2-·¥Ä…¥·¥õ…™ ü…™…¥·¥ã\n3-…¥s“ì·¥°\n4-·¥Ñ·¥Ä Ä·¥Ö…¢·¥Ä·¥ç·¥á\n5- ô·¥è·¥õ")
                }
        }
    }
)
